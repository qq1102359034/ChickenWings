 /**
     * thymeleaf模板引擎默认规则
     *     private static final Charset DEFAULT_ENCODING;
     *     public static final String DEFAULT_PREFIX = "classpath:/templates/";
     *     public static final String DEFAULT_SUFFIX = ".html";
     *     private boolean checkTemplate = true;
     *     private boolean checkTemplateLocation = true;
     *     private String prefix = "classpath:/templates/";
     *     private String suffix = ".html";
     *
     *
     *     html需要加入在html标签xmlns:th="http://www.thymeleaf.org"   <html lang="en" xmlns:th="http://www.thymeleaf.org">
     *     th:text 获取文本转义特殊字符
     *     th:utext 获取文本不转义特殊字符
     *
     */

    @RequestMapping("/")
    public String indextest(Map<String,Object> map){
        map.put("hello","<h1>你好</h1>");
        map.put("user", Arrays.asList("a","b","c"));

        //classpath:/public/indextest.html
        return "indextest";
    }
/** 官网API https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#standard-expression-syntax
 *  支持标签
 *  Order	Feature	Attributes
 *  1	Fragment inclusion	                th:insert
 *                                          th:replace
 *  2	Fragment iteration	                th:each
 *  3	Conditional evaluation	            th:if
 *                                          th:unless
 *                                          th:switch
 *                                          th:case
 *  4	Local variable definition	        th:object
 *                                          th:with
 *  5	General attribute modification	     th:attr
 *                                           th:attrprepend
 *                                          th:attrappend
 *  6	Specific attribute modification	    th:value
 *                                          th:href
 *                                          th:src
 *  ...
 *  7	Text (tag body modification)	    th:text
 *                                          th:utext
 *  8	Fragment specification	            th:fragment
 *  9	Fragment removal	                th:remove
 *
 *  支持的表达式语法:
 *   Simple expressions:
 *   Variable Expressions: ${...}                       获取变量值   OGNL表达式
 *          1.获取对象属性,调用方法
 *          2.使用内置对象
 *           #ctx: the context object.                       示例Established locale country: <span th:text="${#locale.country}">US</span>.
 *           #vars: the context variables.
 *           #locale: the context locale.
 *           #request: (only in Web Contexts) the HttpServletRequest object.
 *           #response: (only in Web Contexts) the HttpServletResponse object.
 *           #session: (only in Web Contexts) the HttpSession object.
 *           #servletContext: (only in Web Contexts) the ServletContext object.
 *
 *            ${session.foo}
 *           3.内置的工具对象
 *             #execInfo: information about the template being processed.
 *             #messages: methods for obtaining externalized messages inside variables expressions, in the same way as they would be obtained using #{…} syntax.
 *             #uris: methods for escaping parts of URLs/URIs
 *             #conversions: methods for executing the configured conversion service (if any).
 *             #dates: methods for java.util.Date objects: formatting, component extraction, etc.
 *             #calendars: analogous to #dates, but for java.util.Calendar objects.
 *             #numbers: methods for formatting numeric objects.
 *             #strings: methods for String objects: contains, startsWith, prepending/appending, etc.
 *             #objects: methods for objects in general.
 *             #bools: methods for boolean evaluation.
 *             #arrays: methods for arrays.
 *             #lists: methods for lists.
 *             #sets: methods for sets.
 *             #maps: methods for maps.
 *             #aggregates: methods for creating aggregates on arrays or collections.
 *             #ids: methods for dealing with id attributes that might be repeated (for example, as a result of an iteration).
 *
 *
 *
 *   Selection Variable Expressions: *{...}             和${} 是一样的, 和补充功能如下:
 *
 *           <div th:object="${session.user}">
 *              <p>Name: <span th:text="*{firstName}">Sebastian</span>.</p>
 *              <p>Surname: <span th:text="*{lastName}">Pepper</span>.</p>
 *              <p>Nationality: <span th:text="*{nationality}">Saturn</span>.</p>
 *            </div>
 *
 *            <div th:object="${session.user}">
 *              <p>Name: <span th:text="${#object.firstName}">Sebastian</span>.</p>
 *              <p>Surname: <span th:text="${session.user.lastName}">Pepper</span>.</p>
 *              <p>Nationality: <span th:text="*{nationality}">Saturn</span>.</p>
 *            </div>
 *
 *
 *   Message Expressions: #{...}                        获取国际化内容
 *   Link URL Expressions: @{...}                       定义url,演示如下:
 *                  <!-- Will produce 'http://localhost:8080/gtvg/order/details?orderId=3' (plus rewriting) -->
 *                  <a href="details.html"
 *                     th:href="@{http://localhost:8080/gtvg/order/details(orderId=${o.id})}">view</a>
 *
 *                  <!-- Will produce '/gtvg/order/details?orderId=3' (plus rewriting) -->
 *                  <a href="details.html" th:href="@{/order/details(orderId=${o.id})}">view</a>
 *
 *                  <!-- Will produce '/gtvg/order/3/details' (plus rewriting) -->
 *                  <a href="details.html" th:href="@{/order/{orderId}/details(orderId=${o.id})}">view</a>
 *
 *
 *   Fragment Expressions: ~{...}    片段引用表达式,演示如下:
 *   <div th:insert="~{commons :: main}">...</div>
 *
 *   Literals
 *   Text literals: 'one text', 'Another one!',…
 *   Number literals: 0, 34, 3.0, 12.3,…
 *   Boolean literals: true, false
 *   Null literal: null
 *   Literal tokens: one, sometext, main,…
 *   Text operations:
 *   String concatenation: +
 *   Literal substitutions: |The name is ${name}|
 *   Arithmetic operations:
 *   Binary operators: +, -, *, /, %
 *   Minus sign (unary operator): -
 *   Boolean operations:
 *   Binary operators: and, or
 *   Boolean negation (unary operator): !, not
 *   Comparisons and equality:
 *   Comparators: >, <, >=, <= (gt, lt, ge, le)
 *   Equality operators: ==, != (eq, ne)
 *   Conditional operators:
 *   If-then: (if) ? (then)
 *   If-then-else: (if) ? (then) : (else)
 *   Default: (value) ?: (defaultvalue)
 *   Special tokens:
 *   No-Operation: _
 *
 */